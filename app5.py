import streamlit as st
from ultralytics import YOLO
from PIL import Image
import io
import google.generativeai as genai
import asyncio
from google.adk.agents import Agent
from google.adk.sessions import InMemorySessionService
from google.adk.runners import Runner
from google.adk.tools import google_search
from google.genai import types
import os
import dotenv


st.markdown("""
<style>
/* Seletor est√°tico para o bot√£o prim√°rio */
[data-testid="stBaseButton-primary"] {
    background-color: #5cb85c !important; /* Cor principal (seu verde) */
    border-color: #5cb85c !important; /* Cor da borda */
    color: white !important; /* Garante que o texto seja branco para contraste */
}

/* Efeito ao passar o mouse (hover) para dar feedback visual */
[data-testid="stBaseButton-primary"]:hover {
    background-color: #4cae4c !important; /* Um verde ligeiramente mais escuro */
    border-color: #4cae4c !important;
}

/* Efeito quando o bot√£o est√° desabilitado */
[data-testid="stBaseButton-primary"]:disabled {
    background-color: #90d390 !important; /* Um verde mais claro para o estado desabilitado */
    border-color: #90d390 !important;
}
</style>
""", unsafe_allow_html=True)

# --- 0. Configura√ß√µes Iniciais e Chaves de API ---

dotenv.load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")

if not api_key:
    # Exibe um erro e impede a execu√ß√£o se a chave n√£o for encontrada
    st.error("ERRO: A vari√°vel de ambiente GOOGLE_API_KEY n√£o foi encontrada. Configure seu arquivo .env.")
    st.stop() 

genai.configure(api_key=api_key) 

# --- 1. Configura√ß√µes do Streamlit Page ---

st.set_page_config(
    page_title="LISPA: Detec√ß√£o Inteligente de Cultivos",
    page_icon="üåø",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- 2. Inicializa√ß√£o do Session State e ADK Session IDs ---

# Inicializa o estado da sess√£o para o hist√≥rico de mensagens e IDs
if "messages" not in st.session_state:
    st.session_state.messages = [] 
if "session_id" not in st.session_state:
    st.session_state.session_id = "default_streamlit_usuario" 
if "user_id" not in st.session_state:
    st.session_state.user_id = "streamlit_usuario"

# --- 3. Inicializa√ß√£o e Configura√ß√£o do Agente LISPA (ADK) ---

@st.cache_resource
def agent_boot():
    root_agent = Agent(
        name = "lispa",
        model= "gemini-2.5-flash", 
        description="""
        Voc√™ √© um **assistente inteligente de recomenda√ß√£o de tratamentos de pragas e doen√ßas em cultivos (as doen√ßas s√£o relativamente a plantas de tomates)**.
        Voc√™ √© um especialista com anos de experi√™ncias em tratamento de cultivos de tomate, que usa as melhores abordagens de tratamento e uma acertividade incopar√°vel.
        Sua principal fun√ß√£o √© ajudar os usu√°rios ** recomendando tratamentos para pragas e doen√ßas em cultivos de tomate com base nos tipos de doen√ßas e pragas que o usu√°rio fornecer**.
        Voc√™ pode usar a seguinte ferramenta:
        - **google_search**: Para pesquisar tratamentos, especialmente para tratamento de pragas e doen√ßas de tomate.
        Voc√™ deve sempre ser o mais claro e objectivo poss√≠vel, n√£o coloque respostas muito longa porque podem cansar os olhos dos usu√°rios.
        Sempre que necess√°rio podes recomendar algumas marcas de produto para o usu√°rio utiizar.
        Voc√™ nunca deve sair do personagem, sempre liste **no m√°ximo tr√™s tratamentos**, levando em considera√ß√£o op√ß√µes populares e alternativas.
        """,
        tools=[google_search],
    )
    return root_agent

root_agent = agent_boot()
APP_NAME = "LISPA"

@st.cache_resource
def get_session_service():
    return InMemorySessionService()

session_service = get_session_service()

@st.cache_resource
def get_adk_runner(_agent, _app_name, _session_service):
    # O ADK Runner precisa receber o servi√ßo e o agente
    adk_runner = Runner(
        agent=_agent,
        app_name=_app_name,
        session_service=_session_service
    )
    return adk_runner

adk_runner = get_adk_runner(root_agent, APP_NAME, session_service)


# --- 4. Inicializa√ß√£o da Sess√£o ADK (CORRE√á√ÉO DO ERRO st.cache_resource) ---

@st.cache_resource
def initialize_adk_session(app_name, user_id, session_id, _service): # ‚¨ÖÔ∏è CORRIGIDO: '_service' com underscore
    """Garante que a sess√£o ADK exista na InMemorySessionService antes de usar o Runner."""
    try:
        # Usa o par√¢metro com underscore
        existing_session = asyncio.run(_service.get_session(app_name=app_name, user_id=user_id, session_id=session_id))
        if not existing_session:
            asyncio.run(_service.create_session(app_name=app_name, user_id=user_id, session_id=session_id))
    except Exception as e:
        st.error(f"‚ùå Erro Cr√≠tico: N√£o foi poss√≠vel inicializar a sess√£o do Agente ADK. Detalhes: {e}")
        st.stop() 

# Chamada para garantir que a sess√£o exista
# ‚¨ÖÔ∏è CORRIGIDO: Passando o objeto 'session_service' como o par√¢metro '_service'
initialize_adk_session(
    APP_NAME, 
    st.session_state.user_id, 
    st.session_state.session_id, 
    _service=session_service
)


# --- 5. Inicializa√ß√£o dos Modelos YOLO (M√∫ltiplos Arquivos) ---

@st.cache_resource
def load_yolo_models():
    """Carrega os dois modelos YOLO na mem√≥ria uma √∫nica vez."""
    pragas_model = None
    doencas_model = None

    # Tente carregar o modelo de Pragas
    try:
        # ATEN√á√ÉO: Substitua 'pragas.pt' pelo nome real do seu arquivo de pragas.
        pragas_model = YOLO('agro.pt') 
        st.sidebar.success("üêõ Modelo de Pragas carregado com sucesso.")
    except Exception as e:
        st.sidebar.error(f"‚ùå Erro ao carregar o modelo de Pragas (pragas.pt): {e}")

    # Tente carregar o modelo de Doen√ßas
    try:
        # ATEN√á√ÉO: Substitua 'doencas.pt' pelo nome real do seu arquivo de doen√ßas.
        doencas_model = YOLO('tesla.pt')
        st.sidebar.success("ü¶† Modelo de Doen√ßas carregado com sucesso.")
    except Exception as e:
        st.sidebar.error(f"‚ùå Erro ao carregar o modelo de Doen√ßas (doencas.pt): {e}")
        
    return pragas_model, doencas_model

pragas_model, doencas_model = load_yolo_models()


# --- 6. Fun√ß√µes Auxiliares do Agente ---

async def run_agent_and_get_response(current_user_id, current_session_id, new_content):
    response_text = "Agente n√£o produziu uma resposta final." 
    async for event in adk_runner.run_async(
        user_id=current_user_id,
        session_id=current_session_id,
        new_message=new_content,
    ):
        if event.is_final_response():
            if event.content and event.content.parts:
                response_text = event.content.parts[0].text
            elif event.actions and event.actions.escalate:
                response_text = f"Agente escalou: {event.error_message or 'Sem mensagem espec√≠fica.'}"
            break 
    return response_text


# --- 7. Layout da Barra Lateral (Sidebar) ---

with st.sidebar:
    st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Lettuce_leaf.svg/1200px-Lettuce_leaf.svg.png", width=100)
    st.title("üå± LISPA - Sistema Inteligente")
    st.markdown("---")
    
    st.markdown("### üîç Detec√ß√£o em Cultivos")
    st.markdown("Aplica√ß√£o para detec√ß√£o de **doen√ßas e pragas** (foco em alface) usando Vis√£o Computacional e o Agente LISPA para recomenda√ß√µes.")
    
    st.markdown("---")
    st.subheader("Detectamos:")
    st.caption("Pragas e Doen√ßas (Exemplo - Mudar conforme seus modelos):")
    st.markdown("- üêõ Pulg√µes (Modelo Pragas)")
    st.markdown("- ü¶ã Lagartas (Modelo Pragas)")
    st.markdown("- ü¶† Mofo (Modelo Doen√ßas)")
    st.markdown("- üçÄ Defici√™ncias (An√°lise do Agente)")
    
    st.markdown("---")
    st.subheader("üí° Instru√ß√µes de Uso")
    st.markdown("1. **Fa√ßa o Upload**: Envie uma imagem clara do seu cultivo.")
    st.markdown("2. **Detectar**: Clique no bot√£o para analisar.")
    st.markdown("3. **Receba o Tratamento**: O **Agente LISPA** fornecer√° recomenda√ß√µes.")
    
    st.markdown("---")
    st.info("Desenvolvido por AgriShilde - Inova√ß√£o para o Agroneg√≥cio.")

# --- 8. Layout do Conte√∫do Principal e L√≥gica de Execu√ß√£o ---

st.markdown("<h1 style='text-align: center; color: green;'>üåø LISPA: An√°lise Inteligente de Cultivos</h1>", unsafe_allow_html=True)
st.markdown("<h3 style='text-align: center; color: #5cb85c;'>Vis√£o Computacional Dupla e Recomenda√ß√µes Agron√¥micas</h3>", unsafe_allow_html=True)
st.markdown("---")

# Widget de Upload e Bot√£o
with st.container(border=True):
    uploaded_file = st.file_uploader("üì• Carregar uma imagem do cultivo (JPG, JPEG, PNG)", type=["jpg", "jpeg", "png"])
    
    col_empty, col_btn = st.columns([4, 1])
    
    with col_btn:
        # Desabilita o bot√£o se n√£o houver arquivo e se nenhum dos modelos carregou
        is_disabled = (uploaded_file is None) or (pragas_model is None and doencas_model is None)
        detect_button = st.button("üîé Analisar Imagem", type="primary", use_container_width=True, disabled=is_disabled)

st.markdown("---")

# Processamento Principal
if uploaded_file is not None:
    col_img, col_status = st.columns([1.5, 2.5])

    with col_img:
        try:
            image = Image.open(uploaded_file)
            st.markdown("### Imagem Carregada")
            st.image(image, caption="Sua Amostra", use_container_width=True)
        except Exception as e:
            st.error(f"‚ùå Erro ao abrir a imagem: {e}")

    # Processamento e Resultados
    if detect_button:
        with st.spinner("‚è≥ Analisando a imagem com modelos YOLO e preparando a recomenda√ß√£o do Agente LISPA..."):
            try:
                # --- L√≥gica de Detec√ß√£o com M√∫ltiplos Modelos ---
                
                all_detections = [] 
                
                # 1. Executar o Modelo de Pragas
                if pragas_model:
                    results_pragas = pragas_model.predict(image, verbose=False) 
                    if results_pragas and results_pragas[0].boxes:
                        all_detections.append(results_pragas[0])

                # 2. Executar o Modelo de Doen√ßas
                if doencas_model:
                    results_doencas = doencas_model.predict(image, verbose=False)
                    if results_doencas and results_doencas[0].boxes:
                        all_detections.append(results_doencas[0])
                
                # --- Fim da L√≥gica de Detec√ß√£o Dupla ---

                if all_detections:
                    
                    final_classes = []
                    final_confidences = []
                    
                    for res in all_detections:
                        final_classes.extend(res.boxes.cls.cpu().numpy())
                        final_confidences.extend(res.boxes.conf.cpu().numpy())

                    with col_status:
                        st.markdown("### Resultados da An√°lise")
                        
                        # Visualiza√ß√£o: Plota o resultado do √öLTIMO modelo que detectou algo 
                        annotated_image = all_detections[-1].plot() 
                        st.markdown("### Imagem com Detec√ß√µes Marcadas")
                        st.image(annotated_image, caption="Problemas Identificados (Combina√ß√£o de Modelos)", use_container_width=True)
                        
                        # --- Tabela de Detec√ß√µes ---
                        detections_data = []
                        for res in all_detections:
                            # Tenta determinar a origem baseada na ordem de detec√ß√£o (simplificado)
                            origem = "Praga" if res == all_detections[0] and pragas_model else "Doen√ßa"
                            for cls, conf in zip(res.boxes.cls.cpu().numpy(), res.boxes.conf.cpu().numpy()):
                                detections_data.append({
                                    "Origem": origem,
                                    "Nome": {res.names[int(cls)]}, 
                                    "Confian√ßa": f"{conf:.2f}"
                                })

                        st.success("‚úÖ Detec√ß√µes (Pragas e/ou Doen√ßas) Realizadas com Sucesso!")
                        st.dataframe(detections_data, use_container_width=True, hide_index=True)
                        
                        # --- Chamada ao Agente LISPA ---
                        
                        detections_for_agent = [
                            f"Origem {origem} (Tipo: {res.names[int(cls)]}) (Confian√ßa: {conf:.2f})" 
                            for cls, conf in zip(final_classes, final_confidences)
                        ]
                        
                        user_message = f"""
                        Com base na imagem de tomate que enviei, os modelos de Vis√£o Computacional (Pragas e Doen√ßas) detectaram os seguintes problemas combinados: 
                        {'; '.join(detections_for_agent)}.
                        
                        Por favor, analise essas detec√ß√µes. Como agr√¥nomo, me forne√ßa **no m√°ximo 3 recomenda√ß√µes** de tratamento para esses problemas combinados, usando sua ferramenta de busca se necess√°rio, considerando apenas confian√ßas a cima ou igual a "0.50".
                        """
                        new_user_content = types.Content(role='user', parts=[types.Part(text=user_message)])
                        
                        response = asyncio.run(run_agent_and_get_response(st.session_state.user_id, st.session_state.session_id, new_user_content))
                        
                        st.session_state.messages.append({"role": "assistant", "content": response})
                        
                        # --- Exibi√ß√£o da Resposta do Agente ---
                        st.markdown("---")
                        st.subheader("ü§ñ Recomenda√ß√µes do Agente LISPA:")

                        with st.expander("Clique para ver as recomenda√ß√µes de tratamento:", expanded=True):
                            st.chat_message("LISPA", avatar="üßë‚Äçüåæ").markdown(response)
                            
                else:
                    with col_status:
                        st.warning("‚ö†Ô∏è Nenhuma doen√ßa ou praga detectada nesta imagem pelos modelos.")
                        st.info("O Agente LISPA n√£o far√° recomenda√ß√µes neste momento, pois a imagem parece saud√°vel ou sem detec√ß√µes claras.")

            except Exception as e:
                # Melhoria na exibi√ß√£o de erro
                st.error(f"‚ùå Um erro inesperado ocorreu durante a an√°lise: {type(e).__name__}: {e}")
    else:
        with col_status:
            st.info("Aguardando o clique em **'Analisar Imagem'** para iniciar a detec√ß√£o.")

st.markdown("---")
st.caption("Vis√£o Computacional (YOLO) e Intelig√™ncia Artificial (LISPA/Gemini) em a√ß√£o.")